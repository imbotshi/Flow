/**
 * Serveur principal Vania Flow
 * Backend Node.js moderne avec Express et Mongoose
 * Architecture refactoris√©e avec DatabaseManager
 */

// Chargement des variables d'environnement
require('dotenv').config();

const express = require('express');
const { connectDB, getConnectionStatus } = require('./config/database');
const { configureApp, configureRoutes } = require('./config/app');

// Configuration du serveur
const PORT = process.env.PORT || 5000;
const NODE_ENV = process.env.NODE_ENV || 'development';
const HOST = process.env.HOST || 'localhost';

// Cr√©ation de l'application Express
const app = express();

/**
 * D√©marrage du serveur avec architecture moderne
 */
const startServer = async () => {
  try {
    console.log('üöÄ D√©marrage du serveur Vania Flow...');
    console.log('üèóÔ∏è  Architecture moderne avec DatabaseManager');
    console.log('=' .repeat(60));
    console.log(`üåç Environnement: ${NODE_ENV}`);
    console.log(`üîó Port: ${PORT}`);
    console.log(`üìç H√¥te: ${HOST}`);
    console.log(`üìä Version: ${process.env.npm_package_version || '1.0.0'}`);
    
    // Configuration de l'application Express
    console.log('\n‚öôÔ∏è  Configuration de l\'application Express...');
    configureApp(app);
    console.log('‚úÖ Configuration Express termin√©e');
    
    // Connexion √† la base de donn√©es MongoDB
    console.log('\nüìä Initialisation de la base de donn√©es...');
    const connection = await connectDB();
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    // Configuration des routes
    console.log('\nüõ£Ô∏è  Configuration des routes...');
    configureRoutes(app);
    console.log('‚úÖ Routes configur√©es');
    
    // D√©marrage du serveur
    const server = app.listen(PORT, HOST, () => {
      console.log('\nüéâ Serveur d√©marr√© avec succ√®s !');
      console.log('=' .repeat(60));
      console.log(`üìç URL: http://${HOST}:${PORT}`);
      console.log(`üîç Health check: http://${HOST}:${PORT}/health`);
      console.log(`üìä DB Status: http://${HOST}:${PORT}/db-status`);
      console.log(`üíª System Info: http://${HOST}:${PORT}/system-info`);
      console.log(`üìà Metrics: http://${HOST}:${PORT}/metrics`);
      console.log('\nüéØ Backend Vania Flow pr√™t √† recevoir des requ√™tes !');
      console.log('‚úÖ Architecture moderne et robuste activ√©e');
      console.log('‚úÖ Retry automatique et gestion d\'erreurs configur√©s');
      console.log('‚úÖ Monitoring et m√©triques disponibles');
    });

    // Configuration du serveur pour une fermeture propre
    server.keepAliveTimeout = 65000; // 65 secondes
    server.headersTimeout = 66000; // 66 secondes

    // Gestion des erreurs du serveur
    server.on('error', (error) => {
      console.error('‚ùå Erreur du serveur:', error);
      if (error.code === 'EADDRINUSE') {
        console.error(`üîß Le port ${PORT} est d√©j√† utilis√©. Changez le port dans .env`);
      }
      process.exit(1);
    });

    // Gestion de la fermeture propre du serveur
    process.on('SIGTERM', () => {
      console.log('\nüõë Signal SIGTERM re√ßu. Fermeture propre du serveur...');
      server.close(() => {
        console.log('‚úÖ Serveur ferm√© proprement');
        process.exit(0);
      });
    });

    return server;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error.message);
    
    // Log d√©taill√© en d√©veloppement
    if (NODE_ENV === 'development') {
      console.error('üìã D√©tails techniques:', error);
    }
    
    process.exit(1);
  }
};

/**
 * Gestion des erreurs non captur√©es
 */
const setupErrorHandling = () => {
  // Erreurs de promesses non g√©r√©es
  process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Erreur non g√©r√©e (Promise):', reason);
    console.error('üìã Promise:', promise);
    
    // En production, on peut choisir de ne pas arr√™ter le serveur
    if (NODE_ENV === 'production') {
      console.log('‚ö†Ô∏è  Mode production: Le serveur continue de fonctionner');
    } else {
      process.exit(1);
    }
  });

  // Erreurs d'exceptions non g√©r√©es
  process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non g√©r√©e (Exception):', error);
    console.error('üìã Stack trace:', error.stack);
    
    // Les exceptions non g√©r√©es sont critiques, on arr√™te le serveur
    process.exit(1);
  });

  // Gestion des signaux d'arr√™t
  process.on('SIGINT', () => {
    console.log('\nüõë Signal SIGINT re√ßu (Ctrl+C)');
    process.exit(0);
  });

  // Gestion des erreurs de m√©moire
  process.on('warning', (warning) => {
    console.warn('‚ö†Ô∏è  Avertissement syst√®me:', warning.name);
    console.warn('üìã Message:', warning.message);
    console.warn('üìã Stack:', warning.stack);
  });
};

/**
 * Affichage des informations de d√©marrage
 */
const displayStartupInfo = () => {
  console.log('\nüìã Informations de d√©marrage:');
  console.log(`   Node.js: ${process.version}`);
  console.log(`   Plateforme: ${process.platform} ${process.arch}`);
  console.log(`   PID: ${process.pid}`);
  console.log(`   R√©pertoire: ${process.cwd()}`);
  console.log(`   Variables d'environnement: ${Object.keys(process.env).length}`);
  
  // V√©rification des variables critiques
  const criticalVars = ['NODE_ENV', 'PORT', 'MONGODB_URI'];
  criticalVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
      console.log(`   ‚úÖ ${varName}: ${varName === 'MONGODB_URI' ? '***configur√©***' : value}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${varName}: non d√©fini (valeur par d√©faut utilis√©e)`);
    }
  });
};

// Configuration de la gestion d'erreurs
setupErrorHandling();

// Affichage des informations de d√©marrage
displayStartupInfo();

// D√©marrage du serveur
startServer(); 