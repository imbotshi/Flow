/**
 * Service de gestion des utilisateurs
 * Communication avec l'API backend pour la gestion des utilisateurs
 */

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';

class UserService {
  /**
   * V√©rifier si un utilisateur existe dans la base de donn√©es
   * @param {string} telephone - Num√©ro de t√©l√©phone √† v√©rifier
   * @returns {Promise<Object>} - R√©sultat de la v√©rification
   */
  async verifierUtilisateur(telephone) {
    try {
      console.log('üîç V√©rification utilisateur:', telephone);
      
      const response = await fetch(`${API_BASE_URL}/utilisateurs/verifier`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telephone })
      });

      const data = await response.json();
      
      console.log('üìã R√©ponse v√©rification utilisateur:', data);
      
      if (!response.ok) {
        throw new Error(data.message || 'Erreur lors de la v√©rification');
      }

      return {
        success: true,
        existe: data.existe,
        profilComplet: data.profilComplet,
        message: data.message
      };

    } catch (error) {
      console.error('‚ùå Erreur v√©rification utilisateur:', error);
      return {
        success: false,
        existe: false,
        profilComplet: false,
        message: error.message || 'Erreur lors de la v√©rification de l\'utilisateur'
      };
    }
  }

  /**
   * Cr√©er un nouvel utilisateur
   * @param {Object} userData - Donn√©es de l'utilisateur
   * @returns {Promise<Object>} - R√©sultat de la cr√©ation
   */
  async creerUtilisateur(userData) {
    try {
      console.log('üë§ Cr√©ation utilisateur:', userData);
      
      const response = await fetch(`${API_BASE_URL}/utilisateurs/creer`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData)
      });

      const data = await response.json();
      
      console.log('üìã R√©ponse cr√©ation utilisateur:', data);
      
      if (!response.ok) {
        throw new Error(data.message || 'Erreur lors de la cr√©ation');
      }

      return {
        success: true,
        utilisateur: data.utilisateur,
        message: data.message
      };

    } catch (error) {
      console.error('‚ùå Erreur cr√©ation utilisateur:', error);
      return {
        success: false,
        utilisateur: null,
        message: error.message || 'Erreur lors de la cr√©ation de l\'utilisateur'
      };
    }
  }

  /**
   * Mettre √† jour la derni√®re connexion d'un utilisateur
   * @param {string} telephone - Num√©ro de t√©l√©phone
   * @returns {Promise<Object>} - R√©sultat de la mise √† jour
   */
  async mettreAJourConnexion(telephone) {
    try {
      console.log('üîÑ Mise √† jour connexion:', telephone);
      
      const response = await fetch(`${API_BASE_URL}/utilisateurs/connexion/${telephone}`, {
        method: 'PUT'
        // Pas de body JSON, donc pas besoin du header Content-Type
      });

      const data = await response.json();
      
      console.log('üìã R√©ponse mise √† jour connexion:', data);
      
      if (!response.ok) {
        throw new Error(data.message || 'Erreur lors de la mise √† jour');
      }

      return {
        success: true,
        message: data.message,
        dateDerniereConnexion: data.dateDerniereConnexion
      };

    } catch (error) {
      console.error('‚ùå Erreur mise √† jour connexion:', error);
      return {
        success: false,
        message: error.message || 'Erreur lors de la mise √† jour de la connexion'
      };
    }
  }

  /**
   * Obtenir les informations d'un utilisateur
   * @param {string} telephone - Num√©ro de t√©l√©phone
   * @returns {Promise<Object>} - Informations de l'utilisateur
   */
  async obtenirUtilisateur(telephone) {
    try {
      console.log('üìã R√©cup√©ration utilisateur:', telephone);
      
      const response = await fetch(`${API_BASE_URL}/utilisateurs/${telephone}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const data = await response.json();
      
      console.log('üìã R√©ponse r√©cup√©ration utilisateur:', data);
      
      if (!response.ok) {
        throw new Error(data.message || 'Erreur lors de la r√©cup√©ration');
      }

      return {
        success: true,
        utilisateur: data.utilisateur
      };

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateur:', error);
      return {
        success: false,
        utilisateur: null,
        message: error.message || 'Erreur lors de la r√©cup√©ration de l\'utilisateur'
      };
    }
  }
}

// Export d'une instance unique du service
const userService = new UserService();
export default userService; 