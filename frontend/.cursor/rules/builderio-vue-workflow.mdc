---
alwaysApply: false
---
### üß© Exigences G√©n√©rales {.section}

- **Framework** : Vue 3 (Composition API)
- **Langage** : Typescript activ√©
- **Responsive** : Mobile-first, adaptable desktop
- **Export attendu** : fichiers `.vue` modulaires

**Structure demand√©e** :
- Atomic design (atoms, molecules, organisms)
- Composants clairs, isol√©s, r√©utilisables
- Navigation entre √©crans via Vue Router
- Nommage en `PascalCase`

---

### üß≠ Workflow Utilisateur {.section}

```json
{
  "type": "workflow",
  "framework": "vue",
  "screens": [
    {
      "id": "PhoneInputScreen",
      "components": ["PhoneInput", "SubmitButton"],
      "next": "VerifyOtpScreen"
    },
    {
      "id": "VerifyOtpScreen",
      "components": ["OtpInput", "ResendLink", "ValidateButton"],
      "next": "PersonalInfoScreen"
    },
    {
      "id": "PersonalInfoScreen",
      "components": ["TextInputName", "TextInputEmail", "SubmitButton"],
      "next": "Dashboard"
    },
    {
      "id": "Dashboard",
      "components": ["UserSummary", "NotificationsList", "NavigationMenu"]
    }
  ]
}
```

Chaque √©cran doit √™tre g√©n√©r√© dans un fichier `.vue`, et reli√© logiquement au suivant par le router.

---

### üß† Comportement attendu de Builder.io {.section}

- G√©n√©ration automatique des composants Vue.js en respectant les noms et structures sp√©cifi√©s
- Ajout des props n√©cessaires et liaison des √©v√©nements via `emit`
- Navigation logique assur√©e via Vue Router
- Respect du design system (grille, tokens, marges/paddings)
- Gestion des √©tats `idle`, `loading`, `success`, `error`

---

### üîê S√©curit√© et UX {.section}

- Affichage de feedback utilisateur lors des actions
- Gestion des erreurs r√©seau ou validation
- Comportement accessible (focus, lecture √©cran)

---

### üì¶ Format attendu du livrable {.section}

- `/components/` : composants r√©utilisables
- `/pages/` : √©crans Vue li√©s au router
- `/router/` : configuration Vue Router
- `/store/` : √©tat centralis√© (Pinia recommand√©)
- `/assets/` : ic√¥nes, illustrations

---

### ‚úÖ Crit√®res de validation {.section}

- Code lisible, typ√©, modulaire
- Navigation fluide entre les √©tapes
- Interfaces fid√®les aux maquettes
- Z√©ro bug sur le parcours
- Fichiers `.vue` exploitables directement dans un repo

---